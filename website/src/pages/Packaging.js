import React, { useState } from 'react'
import Sidebar from '../components/documentation/Sidebar/Sidebar'
import SidebarRes from '../components/documentation/SidebarResponsive/SidebarRes'
import { Article, ArticleTitle, Section, Scroll, ScrollTitle, ScrollSubTitle, ArticleP, Page, ScrollContainer } from '../components/documentation/ArticleElements'
import styled from 'styled-components'

export const List = styled.ul`
    margin-top: 10px;
    padding-left: 5.6%;
    // list-style-type: decimal;
    width: 100%;
`;
export const ListItem = styled.li`
    margin: 10px 0;
`;

export const H = styled.div`
    font-size: 24px;
    font-weight: 500;
    width: 100%;
    margin-top: 25px;
`;

export const Link = styled.a`
    color: #0077ff;
    cursor: pointer;
    text-decoration: none;

    &:hover {
        text-decoration: underline;
    }
`;

export const Code = styled.div`
    margin-top: 15px;
    padding: 15px 15px;
    background: #ddd;
    width: 100%;
    border-radius: 5px;
    font-family: Menlo;
`;

export const CodeShort = styled.div`
    // margin-top: 15px;
    padding: 2px 5px;
    background: #ddd;
    // width: 100%;
    border-radius: 5px;
    font-family: Menlo;
    display: inline-block;
    font-size: 14px;
`;

const Packaging = () => {
    const [isOpen, setIsOpen] = useState(false)

    const toggle = () => {
        setIsOpen(!isOpen)
    };
    return (
        <div>
            <SidebarRes isOpen={isOpen} toggle={toggle} />
            <Sidebar toggle={toggle}/>
            <Page
            initial = {{opacity: 0}}
            animate = {{opacity: 1}}
            transition = {{duration: 1}}> 
            <Article>
                <ArticleTitle>Packaging</ArticleTitle>
                <Section className='one'>
                <H>Package Python code with <Link>PyInstaller</Link></H>
                <List>
                    <ListItem>Run anaconda prompt, activate the conda environment (if you haven't done that already).</ListItem>
                    <ListItem>Navigate to 'src' folder.</ListItem>
                    <ListItem>Run: <Code>python -m PyInstaller pysoda/api.py --distpath pysodadist</Code></ListItem>
                </List>
                <ArticleP>Optional:</ArticleP>
                <List>
                    <ListItem>Edit spec file as needed (e.g. exclude PyQt5, tkinter). Especially, adding the following may be required on Windows and MAC: <Code>hiddenimports=['pkg_resources.py2_warn']</Code></ListItem>
                    <ListItem>To generate exe, Run: <Code>python -m PyInstaller --noconsole api.spec --distpath pysodadist</Code></ListItem>
                    <ListItem>for electron packaging, build and pysoda folder (with the .py files) could be deleted or ignored</ListItem>
                </List>
                <ArticleP>You can then delete the build folder and the api.spec file generated by PyInstaller before you move on since they are not necessary for packaging and distributing the app.</ArticleP>
                </Section>
                <Section className='two'>
                <H>Package electron app</H>
                <ArticleP>You can use the predefined build script to create a release for the app.</ArticleP>
                <List>
                    <ListItem>Windows:<Code>npm run build-win</Code></ListItem>
                    <ListItem>Mac:<Code>npm run build-mac</Code></ListItem>
                    <ListItem>Linux:<Code>npm run build-linux</Code></ListItem>
                </List>
                <ArticleP>If there are any errors, please check your build settings in the package.json. For more information regarding the build process and all the possible configuration options please refer to <Link>electron-builder</Link> documentation.</ArticleP>
                </Section>
                <Section className='three'>
                <H>Creating Releases</H>
                <ArticleP>If you would like to fork this project and submit releases to your repository, please use the <CodeShort>npm run deploy-{'<'}platform{'>'}</CodeShort> command. You will also need to change the two repository options to point to your repository in your <CodeShort>package.json</CodeShort>. You will need a <Link>Github Access Token</Link> to allow <Link>electron-builder</Link> to push to GitHub or any other repository. This access token must be in your environment when you run the npm script. On Linux and MacOS, you can set this variable directly in your <CodeShort>.bashrc</CodeShort> or <CodeShort>.zshrc</CodeShort> with an export command. For windows please refer to these <Link>instructions</Link>.</ArticleP>
                </Section>
            </Article>
            <ScrollContainer>
            <Scroll>
                <ScrollTitle>In this article</ScrollTitle>
                <ScrollSubTitle to='one' smooth='true'>Package Python code with PyInstaller</ScrollSubTitle>
                <ScrollSubTitle to='two' smooth='true'>Package electron app</ScrollSubTitle>
                <ScrollSubTitle to='three' smooth='true'>Creating Releases</ScrollSubTitle>
            </Scroll>
            </ScrollContainer>
            </Page>
        </div>
    )
}

export default Packaging
